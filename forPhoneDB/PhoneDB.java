package forPhoneDB;import java.io.*;import java.awt.*;import java.awt.event.*;import javax.swing.*;public class PhoneDB extends JFrame {	private JLabel familyNameL, firstNameL, homePhoneL, workPhoneL,	cellPhoneL, fileNameL, messageL;	private JTextField familyNameTF, firstNameTF, homePhoneTF, 	cellPhoneTF, workPhoneTF, fileNameTF;	private JScrollPane messagesSP;	private JTextArea messagesTA;	private JButton enterB, searchB, deleteB, 	displayB, loadB, saveB, okayB, cancelB;	private List<PhoneInfo> myPhoneList;	private String fileName;	private PhoneInfo currentPIRecord, found;	private boolean processingSave, duplicateRecord;	private Container myCP;	private String errorMsg, fName, lName;	private boolean processingDelete;	public PhoneDB() {		super("Phone Data Base");		myCP = getContentPane();		myCP.setLayout(null);		setSize(450, 600);		setLocation(100,100);		myPhoneList = new List<PhoneInfo>()  ;		messagesTA = new JTextArea();		messagesTA.setFont(new Font("chicago", 0, 10));		messagesTA.setEditable(false);		messagesSP = new JScrollPane(messagesTA,				JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,				JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);		messagesSP.setSize(400,200);		messagesSP.setLocation(10, 370);		myCP.add(messagesSP); 		addWindowListener(new WindowAdapter() {			public void windowClosing(WindowEvent e) {				System.exit(0);			}//windowClosing		}); //end of definition of WindowAdapter and semicolon to end the line 		messageL = new JLabel("Messages:", JLabel.CENTER);		messageL.setSize(150, 30);		messageL.setLocation(10, 330);		messageL.setFont(new Font("Chicago", 1, 12));		myCP.add(messageL);		cancelB = new JButton("Cancel");		cancelB.setSize(100, 30);		cancelB.setLocation(340, 290);		cancelB.setFont(new Font("Chicago", 1, 12));		cancelB.addActionListener(new CancelBHandler());		myCP.add(cancelB);		okayB = new JButton("OK");		okayB.setSize(100, 30);		okayB.setLocation(230, 290);		okayB.setFont(new Font("Chicago", 1, 12));		okayB.addActionListener(new OkayBHandler());		myCP.add(okayB);		saveB = new JButton("Save");		saveB.setSize(100, 30);		saveB.setLocation(120, 290);		saveB.setFont(new Font("Chicago", 1, 12));		saveB.addActionListener(new SaveBHandler());		myCP.add(saveB);		loadB = new JButton("Load");		loadB.setSize(100, 30);		loadB.setLocation(10, 290);		loadB.setFont(new Font("Chicago", 1, 12));		loadB.addActionListener(new LoadBHandler());		myCP.add(loadB);		fileNameTF = new JTextField("");		fileNameTF.setSize(200,30);		fileNameTF.setLocation(175, 250);		fileNameTF.setFont(new Font("Chicago", 0, 12));		fileNameTF.setEditable(true);		myCP.add(fileNameTF);		fileNameL = new JLabel("File Name:", JLabel.CENTER);		fileNameL.setSize(150,30);		fileNameL.setLocation(10,250);		fileNameL.setFont(new Font("Chicago", 1, 12));		myCP.add(fileNameL);		deleteB = new JButton("Delete");		deleteB.setSize(100, 30);		deleteB.setLocation(340, 210);		deleteB.setFont(new Font("Chicago", 1, 12));		deleteB.addActionListener(new DeleteBHandler());		myCP.add(deleteB);		searchB = new JButton("Search");		searchB.setSize(100, 30);		searchB.setLocation(230, 210);		searchB.setFont(new Font("Chicago", 1, 12));		searchB.addActionListener(new SearchBHandler());		myCP.add(searchB);		displayB = new JButton("Display");		displayB.setSize(100, 30);		displayB.setLocation(120, 210);		displayB.setFont(new Font("Chicago", 1, 12));		displayB.addActionListener(new DisplayBHandler());		myCP.add(displayB);		enterB = new JButton("Enter");		enterB.setSize(100, 30);		enterB.setLocation(10, 210);		enterB.setFont(new Font("Chicago", 1, 12));		enterB.addActionListener(new EnterBHandler());		myCP.add(enterB);		workPhoneTF = new JTextField("");		workPhoneTF.setLocation(175,170);		workPhoneTF.setSize(200, 30);		workPhoneTF.setFont(new Font("Chicago", 0, 12));		workPhoneTF.setEditable(true);		myCP.add(workPhoneTF);		homePhoneTF = new JTextField("");		homePhoneTF.setLocation(175, 90);		homePhoneTF.setSize(200, 30);		homePhoneTF.setFont(new Font("Chicago", 0, 12));		myCP.add(homePhoneTF);		cellPhoneTF = new JTextField("");		cellPhoneTF.setLocation(175, 130);		cellPhoneTF.setSize(200, 30);		cellPhoneTF.setFont(new Font("Chicago", 0, 12));		myCP.add(cellPhoneTF);		firstNameTF = new JTextField("");		firstNameTF.setLocation(175, 10);		firstNameTF.setSize(200,30);		firstNameTF.setFont(new Font("Chicago", 0, 12));		myCP.add(firstNameTF);		familyNameTF = new JTextField("", 0);		familyNameTF.setLocation(175, 50);		familyNameTF.setSize(200, 30);		familyNameTF.setFont(new Font("Chicago", 0, 12));		myCP.add(familyNameTF);		workPhoneL = new JLabel("Work Phone:", JLabel.CENTER);		workPhoneL.setLocation(10, 170);		workPhoneL.setSize(150, 30);		workPhoneL.setFont(new Font("Chicago", 1, 12));		myCP.add(workPhoneL);		homePhoneL = new JLabel("Home Phone:", JLabel.CENTER);		homePhoneL.setLocation(10, 90);		homePhoneL.setSize(150, 30);		homePhoneL.setFont(new Font("Chicago", 1, 12));		myCP.add(homePhoneL);		cellPhoneL = new JLabel("Cell Phone:", JLabel.CENTER);		cellPhoneL.setLocation(10, 130);		cellPhoneL.setSize(150, 30);		cellPhoneL.setFont(new Font("Chicago", 1, 12));		myCP.add(cellPhoneL);		firstNameL = new JLabel("First Name:", JLabel.CENTER);		firstNameL.setLocation(10, 10);		firstNameL.setSize(150, 30);		//firstNameL.reshape(16, 25, 112, 25);		firstNameL.setFont(new Font("Chicago", 1, 12));		myCP.add(firstNameL);		familyNameL = new JLabel("Family Name:", JLabel.CENTER);		familyNameL.setLocation(10, 50);		familyNameL.setSize(150, 30);		//familyNameL.reshape(18, 58, 111, 24);		familyNameL.setFont(new Font("chicago", 1, 12));		myCP.add(familyNameL);		setVisible(true);		familyNameTF.requestFocus();		processingSave = false;		duplicateRecord = false;		processingDelete = false;		adjustButtons(true);	}//constructor	private String getUserInput(JTextField theTF, String theText){		String userInput = theTF.getText();		if (userInput.equals("")){			errorMsg += "You need to enter a " + theText + " name.\n";		}//if		return userInput;	}//getUserInput	private boolean validNameInput() {			errorMsg = "";		fName = getUserInput(firstNameTF, "first");		lName = getUserInput(familyNameTF, "family");		return (errorMsg.equals("") ? true : false);	}// validNameInput method	private void clearInputFields() {		familyNameTF.setText("");		firstNameTF.setText("");		homePhoneTF.setText("");		cellPhoneTF.setText("");		workPhoneTF.setText("");		fileNameTF.setText("");	}//clearInputFields	private void reset() {		adjustButtons(true);		clearInputFields();	}//reset 	private void adjustButtons(boolean tFValue) {		saveB.setEnabled(tFValue);		enterB.setEnabled(tFValue);		displayB.setEnabled(tFValue);		searchB.setEnabled(tFValue);		deleteB.setEnabled(tFValue);		loadB.setEnabled(tFValue);		okayB.setEnabled(!tFValue);		cancelB.setEnabled(!tFValue);	}//adjustButtons	public class EnterBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			if (validNameInput()){				currentPIRecord = new PhoneInfo(fName, lName, 						homePhoneTF.getText(), cellPhoneTF.getText(),workPhoneTF.getText());				found = myPhoneList.search(currentPIRecord);				if (found != null) {//person already in DB					duplicateRecord = true;					adjustButtons(false);					messagesTA.setText("\nRecord already exists:\n"+ found.toString()							+ "\nPress OK to replace old record or Cancel to cancel new entry.\n");					okayB.requestFocus();				} else {					if(myPhoneList.add(currentPIRecord)) {						messagesTA.setText("\n" + currentPIRecord + "added to the DB.\n");					}else {						messagesTA.setText("\nFailed to add " + currentPIRecord + " to the DB.\n");					}//else				}//else for add new record				clearInputFields();			} else {				messagesTA.setText(errorMsg + "\n");			}//else		}//actionPerformed	}//EnterBHandler	public class DisplayBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			messagesTA.setText("\nCurrent Data in DB is:\n"					+ myPhoneList.toString());		}//actionPerformed	}//SearchBHandler	public class SearchBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			if (validNameInput()) {				PhoneInfo findMe = new PhoneInfo(fName,lName);				found = myPhoneList.search(findMe);				if (found == null) {					messagesTA.setText("The record was not found.");				} else {					messagesTA.setText(found.toString());				} // else				clearInputFields();			} else {   				messagesTA.setText(errorMsg);			}// else		}//actionPerformed	}//SearchBHandler	public class DeleteBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			if (validNameInput()) {				PhoneInfo findMe = new PhoneInfo(fName,lName);				found= myPhoneList.search(findMe);				if (found == null) {					clearInputFields();					messagesTA.setText(findMe + "not in database");					return;				}// if				processingDelete = true;				adjustButtons(false);				messagesTA.setText("Are you sure you want to delete: \n\n" 						+ found + "? \n\n    Press OK  or Cancel");			} else {				messagesTA.setText(errorMsg);			} // else		}//actionPerformed	}//DeleteBHandler	public class LoadBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			fileName = fileNameTF.getText();			if(fileName.compareTo("") > 0){				File theFile = new File(fileName);				if(!theFile.exists()) {					messagesTA.setText(fileName + " does not exist - cannot load data\n");				}else if(!theFile.canRead()) {					messagesTA.setText("Cannot read from " + fileName+"\n");				} else {					String fromLoad = myPhoneList.loadFromFile(fileName);					messagesTA.setText("Data loaded from "+fileName+"\n"							+ fromLoad + "\n");				}//else				clearInputFields();			} else {				messagesTA.setText("You must enter a file name in order to load a file");			}//else		}//actionPerformed	}//LoadBHandler	public class SaveBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			fileName = fileNameTF.getText();			fileNameTF.setText("");			String message = "";			if(fileName.compareTo("") > 0){				File theFile = new File(fileName);				if(!theFile.exists()) {					message = myPhoneList.saveToFile(fileName);					messagesTA.setText("Data saved to file "+fileName+".\n"							+ message + "\n");				} else if (!theFile.canWrite()) {					messagesTA.setText("Cannot write data to "+fileName+".\n");				} else {					adjustButtons(false);					processingSave = true;					messagesTA.setText("\nPress OK to overwrite file "+							fileName + " or press Cancel to cancel save request\n");				}//else			} else {				messagesTA.setText("You must enter a file name in order to save a file");			}//else		}//actionPerformed	}//SaveBHandler	public class OkayBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			if(processingSave) {				String errmsg = myPhoneList.saveToFile(fileName);				messagesTA.setText(fileName + " over written.\n"						+ errmsg + "\n");				processingSave = false;			} else if (duplicateRecord) {				if(myPhoneList.delete(found)) {					if(myPhoneList.add(currentPIRecord)){						messagesTA.setText("\nRecord for " + currentPIRecord.getName() 								+ " changed.\n");					}else {						messagesTA.setText("\nError in adding new record. " 								+ fName + " " + lName +" deleted from DB.\n");					}//else					duplicateRecord = false;				} else {					messagesTA.setText("\nError in deleting old record. No change in DB.\n");				}//inner else			}else if (processingDelete) {				if (myPhoneList.delete(found)) {						messagesTA.setText("The record for " + found + " was deleted.");				} else {					messagesTA.setText("Failure occurred in deleting " + found + ".\n");				}				processingDelete = false;			}else {				System.out.println("OK Button being handled at inappropriate time"						+ e.toString());			}//else			reset();		}//actionPerformed	}//OkayBHandler	public class CancelBHandler implements ActionListener {		public void actionPerformed(ActionEvent e) {			if(processingSave) {				messagesTA.setText("Save request cancelled. " 						+ fileName + "unchanged.\n");				processingSave = false;			} else if (duplicateRecord) {				messagesTA.setText("Information about "+ fName 						+ " " +lName + " unchanged.\n");				duplicateRecord = false;			}else if(processingDelete){				messagesTA.setText("Delete request cancelled. \n");				processingDelete = false;			} else {				System.out.println("Cancel Button being handled at inappropriate time"						+ e.toString());			}//else			reset();		}//actionPerformed	}//CancelBHandler	public static void main(String args[]) {		PhoneDB myApp = new PhoneDB();	}//main}//PhoneDB