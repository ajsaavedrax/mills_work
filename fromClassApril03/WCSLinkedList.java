package fromClassApril03;import java.util.*;//CS 64 Lab 07 //File: WCSLinkedList.java/*A class for maintaining a linked list. Currently it only contains a constructor forcreating a list and a toString method used to display the entire list. */public class WCSLinkedList < E extends Comparable<E>> {	Node<E> myHead;//reference to the first Node in the list	private Comparator<E> myComparator;	public WCSLinkedList () {		myHead = null;		myComparator = null;	}//0 parameter constructor	public WCSLinkedList (Comparator<E> theComparator) {		myHead = null;		myComparator = theComparator;	}//1 parameter constructor	private int myCompare(E first, E second){		if(myComparator == null){			return first.compareTo(second);		}//if		return myComparator.compare(first, second);	}//myCompare	public boolean delete(E deleteMe){		if(isEmpty()){			return false;		}//if the list is empty		if(deleteMe.equals(myHead.getData())){			myHead = myHead.getLink();			return true;		}//if deleting first Node		if(getCount() ==1){			return false;		}//there is only one node and not the one to delete		Node<E> mover = myHead.getLink();		Node<E> trailer = myHead;		while (mover != null && 				!deleteMe.equals(mover.getData())){			trailer = mover;			mover = mover.getLink();		}//while		if(mover == null){			return false;		}//deleteMe not in list		trailer.setLink(mover.getLink());		return true;	}//delete	public E search(E findMe){		Node<E> mover = myHead;		while (mover != null && 				!findMe.equals(mover.getData())){			mover = mover.getLink();		}//while		return (mover != null ? mover.getData()				:null);	}//search	public boolean add (E addMe){		if(search(addMe) != null){			return false;		}//do not add duplicate		myHead = new Node<E> (addMe, myHead);		return true;	}//add	public int getCount(){		int count = 0;		Node<E> mover = myHead;		while(mover != null){			count++;			mover = mover.getLink();		}//while		return count;	}//getCount	public boolean isEmpty(){		return myHead == null;	}//isEmpty	public String toString() {		Node<E> mover = myHead;		String tempS = "";		while(mover != null) {			tempS += mover.getData().toString() +"\n";			mover = mover.getLink();		}//while		return tempS;	}//toString}//WCSLinkedList